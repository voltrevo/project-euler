func Digits(n) {
  res := [];

  for (n > 0) {
    digit := n % 10;
    res ++= [digit];
    n -= digit;
    n /= 10;
  }

  return res;
};

func isPalindrome(n) {
  digits := Digits(n);

  left := 0u64;
  right := digits:Length() - 1u64;

  for (left < right) {
    if (digits[left] != digits[right]) {
      return false;
    }

    left++;
    right--;
  }

  return true;
};

func slow() { // #warn #unused
  largest := 0;
  keepGoing := true;

  for (i := 999; i > 9 && keepGoing; i--) {
    for (j := i; j > 9 && keepGoing; j--) {
      product := i * j;

      if (product <= largest) {
        keepGoing = false;
      }

      if (product > largest) {
        if (isPalindrome(product)) {
          largest = product;
          keepGoing = false;
        }
      }
    }

    keepGoing = (i - 1) ** 2 > largest;
  }

  return largest;
};

func fast() {
  largest := 0;
  sum := 1996;

  for {
    rem := sum % 2;
    i := (sum + rem) / 2;
    j := (sum - rem) / 2;

    if (i * j <= largest) {
      return largest;
    }

    for (i * j % 10 != 9) {
      i++;
      j--;
    }

    for (i <= 999 && i * j > largest) {
      product := i * j;

      if (isPalindrome(product)) {
        largest = product;
      }

      i += switch (i % 10) {
        3 => 10;
        1 => 8;
        9 => 2;
      };

      j = sum - i;
    }

    sum -= switch (sum % 10) {
      6 => 6;
      0 => 4;
    };
  }

  return largest;
};

log.info fast(); // #info #custom
return 'done';
