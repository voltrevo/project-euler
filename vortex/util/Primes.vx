func Wheel(primes) {
  wheel := {};
  wheel.primes := primes;
  wheel.size := wheel.primes:reduce(*);
  wheel.start := wheel.primes:Back() + 1u64;

  for {
    startGood := true;

    for (p of wheel.primes) {
      if (wheel.start % p == 0u64) {
        startGood = false;
        break;
      }
    }

    if (startGood) {
      break;
    }

    wheel.start += 1u64;
  }

  wheel.end := wheel.start + wheel.size;
  wheel.jumps := [];

  i := wheel.start + 1u64;
  j := 1u64;

  for {
    jGood := true;

    for (p of wheel.primes) {
      if (i % p == 0u64) {
        jGood = false;
        break;
      }
    }

    if (jGood) {
      wheel.jumps ++= [j];
      j = 0u64;
    }

    i++;
    j++;

    if (i == wheel.end) {
      wheel.jumps ++= [j];
      break;
    }
  }

  return wheel;
};

func Primes(limit) {
  initPrimes := [2u64, 3u64, 5u64, 7u64];

  if (limit < initPrimes:Back()) {
    primes := [];

    for (p of initPrimes) {
      if (p >= limit) {
        break;
      }

      primes ++= [p];
    }

    return primes;
  }

  wheel := Wheel(initPrimes);

  if (wheel.start >= limit) {
    return initPrimes;
  }

  extraPrimes := [wheel.start];

  i := wheel.start;

  for {
    for (j of wheel.jumps) {
      i += j;

      if (i >= limit) {
        return initPrimes ++ extraPrimes;
      }

      for (p of extraPrimes) {
        if (p * p > i) {
          extraPrimes ++= [i];
          break;
        }

        if (i % p == 0u64) {
          break;
        }
      }
    }
  }

  return initPrimes ++ extraPrimes;
};

return Primes;
