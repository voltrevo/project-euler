func basic() {
  func collatzLen(n) {
    i := 0;

    for (n != 1) {
      mod2 := n % 2;
      i += 1 + mod2;

      n = switch (mod2) {
        0 => n / 2;
        1 => (3 * n + 1) / 2;
      };
    }

    return i;
  };

  longest := 0;

  for (n := 1; n < 1000; n++) {
    len := collatzLen(n);

    if (len > longest) {
      longest = len;
    }
  }

  return longest;
};

func partialCache(cacheStride) {
  func collatzLen(n, cache) {
    nStart := n;
    i := 0;

    for (n != 1) {
      mod2 := n % 2;
      i += 1 + mod2;

      n = switch (mod2) {
        0 => n / 2;
        1 => (3 * n + 1) / 2;
      };

      if (n % cacheStride == 0 && n < nStart) {
        return i + cache[n / cacheStride];
      }
    }

    return i;
  };

  longest := 0;
  cache := [0];

  for (n := 1; n < 1000; n++) {
    len := collatzLen(n, cache);

    if (n % cacheStride == 0) {
      cache ++= [len];
    }

    if (len > longest) {
      longest = len;
    }
  }

  return longest;
};

func fast() {
  import ./util/collatz.vx;

  keys := [
    27, 31, 41, 47, 54, 55, 62, 63, 71, 82, 83, 91, 103, 111, 121, 126, 127,
    137, 155, 159, 167, 169, 191, 206, 207, 222, 223, 225, 231, 233, 235, 239,
    251, 252, 253, 254, 255
  ];

  longest := 0;

  for (base := 0; base < 1000000; base += 256) {
    for (key of keys) {
      n := base + key;
      len := collatz(n);

      if (len > longest) {
        log.info [n, len];
        longest = len;
      }
    }
  }

  return longest;
};

log.info fast();

return 'done';
